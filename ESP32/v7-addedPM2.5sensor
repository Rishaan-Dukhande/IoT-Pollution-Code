#include <WiFi.h>
#include <Adafruit_MQTT.h>
#include <Adafruit_MQTT_Client.h>
#include <Adafruit_BME280.h>
#include <Adafruit_PM25AQI.h>
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>

// ------- WiFi & Adafruit IO Credentials ------
#define WIFI_SSID     "-"
#define WIFI_PASS     "-"
#define AIO_SERVER    "io.adafruit.com"
#define AIO_SERVERPORT 1883
#define AIO_USERNAME  "-"
#define AIO_KEY       "-"

// ------- MQTT Setup -------
WiFiClient client;
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

Adafruit_MQTT_Publish feed_temp     = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/air-quality-sensor.temperature");
Adafruit_MQTT_Publish feed_humidity = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/air-quality-sensor.humidity");
Adafruit_MQTT_Publish feed_aqi      = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/air-quality-sensor.aqi");

// ------- Sensors & Display -------
Adafruit_BME280 bme;   // I2C
Adafruit_PM25AQI pm25;
Adafruit_SH1107 display(64, 128, &Wire);

bool bmeFound = false;
bool oledFound = true;
bool pm25Found = false;

unsigned long lastPublish = 0;
const unsigned long publishInterval = 5000;   // <-- every 5 seconds for testing

// ---------- Functions ----------
void connectWiFi() {
  Serial.print("Connecting to WiFi...");
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" ✅ WiFi connected");
}

void connectMQTT() {
  Serial.print("Connecting to Adafruit IO MQTT...");
  while (mqtt.connect() != 0) {
    Serial.println("Retrying MQTT connection in 5 seconds...");
    delay(5000);
  }
  Serial.println(" ✅ MQTT connected");
}

void updateOLED(float temp, float humid, float pm25val) {
  if (!oledFound) return;

  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.print("Temp:");
  display.print(temp, 1);
  display.println("F");

  display.setCursor(0, 15);
  display.print("Hum:");
  display.print(humid, 1);
  display.println("%");

  display.setCursor(0, 30);
  display.print("PM2.5:");
  display.print(pm25val, 1);
  display.println("ug/m3");

  display.display();
}

// ---------- Setup ----------
void setup() {
  Serial.begin(115200);
  delay(1000);

  // Use correct I²C pins for ESP32
  Wire.begin(21, 22);
  delay(500);

  connectWiFi();
  connectMQTT();

  // --- Initialize BME280 ---
  if (!bme.begin(0x76) && !bme.begin(0x77)) {
    Serial.println("⚠️ Could not find a valid BME280 sensor!");
  } else {
    bmeFound = true;
    Serial.println("✅ BME280 sensor initialized");
  }

  // --- Initialize PM2.5 (UART on Serial2) ---
  Serial2.begin(9600, SERIAL_8N1, 16, 17); // RX2=16 connected to PM2.5 TX
  if (!pm25.begin_UART(&Serial2)) {
    Serial.println("⚠️ Could not find PM2.5 sensor!");
  } else {
    pm25Found = true;
    Serial.println("✅ PM2.5 sensor initialized");
  }

  // --- Initialize OLED ---
  delay(500);
  if (!display.begin(0x3C, true)) {
    Serial.println("⚠️ OLED not found at 0x3C");
    oledFound = false;
  } else {
    display.setRotation(1);
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SH110X_WHITE);
    display.setCursor(0, 0);
    display.println("OLED Ready!");
    display.display();
    Serial.println("✅ OLED initialized!");
  }
}

// ---------- Loop ----------
void loop() {
  mqtt.processPackets(10);
  mqtt.ping();

  unsigned long now = millis();
  if (now - lastPublish >= publishInterval) {
    lastPublish = now;

    // --- Read sensors ---
    float temp = bmeFound ? (bme.readTemperature() * 1.8 + 32) : 0;
    float humid = bmeFound ? bme.readHumidity() : 0;
    float pm25val = 0;

    if (pm25Found) {
      PM25_AQI_Data data;
      if (pm25.read(&data)) {
        pm25val = data.pm25_env;
      } else {
        Serial.println("PM2.5 read error");
      }
    }

    Serial.printf("Temp: %.2f F | Humidity: %.2f %% | PM2.5: %.2f ug/m3\n",
                  temp, humid, pm25val);

    // --- Publish to Adafruit IO ---
    char buf[10];
    dtostrf(temp, 4, 2, buf);
    feed_temp.publish(buf);

    dtostrf(humid, 4, 2, buf);
    feed_humidity.publish(buf);

    dtostrf(pm25val, 4, 2, buf);
    feed_aqi.publish(buf);

    // --- Display on OLED ---
    updateOLED(temp, humid, pm25val);
  }
}
