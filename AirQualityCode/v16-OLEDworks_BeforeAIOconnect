// Final SH1107-compatible Air Quality Monitor Code - Feather M4 + AirLift + OLED

#define USE_AIRLIFT

#include <AdafruitIO_WiFi.h>
#include <Adafruit_BME280.h>
#include <Adafruit_PM25AQI.h>
#include <WiFiNINA.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>

#define IO_USERNAME    "Your username"
#define IO_KEY         "Your AIO key"
#define WIFI_SSID      "J6-supercoolwifi"
#define WIFI_PASS      "penguins"

const double AIO_LATITUDE  = 37.31421842651806;
const double AIO_LONGITUDE = -121.96864537385015;
const double AIO_ELEVATION = 45.0;

#define ESP32_CS_PIN     13
#define ESP32_RESET_PIN  12
#define ESP32_READY_PIN  11
#define SPIWIFI          SPI

AdafruitIO_WiFi io(IO_USERNAME, IO_KEY, WIFI_SSID, WIFI_PASS,
                   ESP32_CS_PIN, ESP32_READY_PIN, ESP32_RESET_PIN, -1, &SPIWIFI);

Adafruit_SH1107 display(64, 128, &Wire);  // SH1107 OLED FeatherWing (height x width)

AdafruitIO_Feed *feed_aqi = nullptr;
AdafruitIO_Feed *feed_aqi_category = nullptr;
AdafruitIO_Feed *feed_temperature = nullptr;
AdafruitIO_Feed *feed_humidity = nullptr;
AdafruitIO_Feed *feed_location = nullptr;

Adafruit_BME280 bme;
Adafruit_PM25AQI pm25;

int redPin = 6;
int greenPin = 9;
int bluePin = 10;

int lastAQI = 0;
unsigned long lastPublish = 0;
const unsigned long publishInterval = 2 * 60 * 1000;

void setup() {
  Serial.begin(115200);
  delay(1000);

  io.connect();

  Serial.print("Connecting to WiFi...");
  WiFi.begin(WIFI_SSID, WIFI_PASS);

  unsigned long wifiStart = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - wifiStart < 10000) {
    Serial.print(".");
    delay(500);
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n✅ WiFi connected");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n❌ Failed to connect to WiFi");
  }

  unsigned long connectStart = millis();
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
    if (millis() - connectStart > 15000) {
      Serial.println("\nFailed to connect to Adafruit IO.");
      break;
    }
  }
  Serial.println("\nConnected to Adafruit IO");

  feed_aqi = io.feed("air-quality-sensor.aqi");
  feed_aqi_category = io.feed("air-quality-sensor.category");
  feed_temperature = io.feed("air-quality-sensor.temperature");
  feed_humidity = io.feed("air-quality-sensor.humidity");
  feed_location = io.feed("air-quality-sensor.location");

  if (feed_location) {
    feed_location->save(1, AIO_LATITUDE, AIO_LONGITUDE, AIO_ELEVATION);
    Serial.println("📍 Location sent to IO");
  }

  if (!bme.begin(0x76)) {
    Serial.println("BME280 not found at 0x76, trying 0x77...");
    if (!bme.begin(0x77)) {
      Serial.println("Could not find a valid BME280 sensor!");
      while (1);
    }
  }
  Serial.println("BME280 sensor initialized");

  Serial1.begin(9600);
  if (!pm25.begin_UART(&Serial1)) {
    Serial.println("Could not find PM2.5 sensor!");
    while(1);
  }
  Serial.println("PM2.5 sensor initialized");

  if (!display.begin(0x3C, true)) {
    Serial.println("❌ SH1107 OLED not found");
    while (1);
  }
  display.setRotation(1);  // FeatherWing orientation
  Serial.println("OLED screen initialized");

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);
  display.setCursor(0, 0);
  display.println(F("OLED Ready"));
  display.display();
  delay(1000);
  display.clearDisplay();

  if (feed_aqi_category) feed_aqi_category->save("Init");
  if (feed_temperature) feed_temperature->save(0);
  if (feed_humidity) feed_humidity->save(0);

  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);

  analogWrite(redPin, 183);
  analogWrite(greenPin, 255);
  analogWrite(bluePin, 255);
}

int calculate_aqi(float pm25_val, String &category) {
  int aqi;
  if (pm25_val <= 12.0) {
    aqi = map(pm25_val, 0, 12, 0, 50);
    category = "Good";
  } else if (pm25_val <= 35.4) {
    aqi = map(pm25_val, 12, 35, 51, 100);
    category = "Moderate";
  } else if (pm25_val <= 55.4) {
    aqi = map(pm25_val, 36, 55, 101, 150);
    category = "Unhealthy for Sensitive Groups";
  } else if (pm25_val <= 150.4) {
    aqi = map(pm25_val, 56, 150, 151, 200);
    category = "Unhealthy";
  } else if (pm25_val <= 250.4) {
    aqi = map(pm25_val, 151, 250, 201, 300);
    category = "Very Unhealthy";
  } else {
    aqi = map(pm25_val, 251, 500, 301, 500);
    category = "Hazardous";
  }
  return aqi;
}

void loop() {
  static bool wasDisconnected = false;

  io.run();

  if (io.status() != AIO_CONNECTED) {
    if (!wasDisconnected) {
      Serial.println("⚠️ Disconnected from Adafruit IO. Attempting to reconnect...");
      wasDisconnected = true;
    }
    io.connect();
    return;
  }

  if (wasDisconnected) {
    Serial.println("🔁 Reconnected to Adafruit IO!");
    wasDisconnected = false;
  }

  unsigned long now = millis();
  if (now - lastPublish >= publishInterval) {
    lastPublish = now;
    Serial.println("Reading sensors...");

    PM25_AQI_Data data;
    float pm_avg = 0;
    int samples = 0;

    for (int i = 0; i < 2; i++) {
      if (pm25.read(&data)) {
        pm_avg += data.pm25_env;
        samples++;
      } else {
        Serial.println("PM2.5 read error");
      }
      io.run();
      delay(1000);
    }

    if (samples == 0) {
      Serial.println("No valid PM2.5 samples");
      return;
    }

    pm_avg /= samples;

    String aqi_cat;
    int aqi = calculate_aqi(pm_avg, aqi_cat);

    float temp = bme.readTemperature() * 1.8 + 32;
    float humid = bme.readHumidity();

    Serial.println("----- Sensor Readings -----");
    Serial.print("AQI: "); Serial.println(aqi);
    Serial.print("Category: "); Serial.println(aqi_cat);
    Serial.print("Temp (F): "); Serial.println(temp);
    Serial.print("Humidity: "); Serial.println(humid);
    Serial.println("---------------------------");

    if (feed_location) feed_location->save(1, AIO_LATITUDE, AIO_LONGITUDE, AIO_ELEVATION);
    if (feed_aqi) feed_aqi->save(aqi);
    if (feed_aqi_category) feed_aqi_category->save(aqi_cat);
    if (feed_temperature) feed_temperature->save(temp);
    if (feed_humidity) feed_humidity->save(humid);

    if (aqi_cat == "Good") {
      analogWrite(redPin, 0);
      analogWrite(greenPin, 255);
      analogWrite(bluePin, 0);
    } else if (aqi_cat == "Moderate") {
      analogWrite(redPin, 180);
      analogWrite(greenPin, 180);
      analogWrite(bluePin, 0);
    } else if (aqi_cat == "Unhealthy for Sensitive Groups") {
      analogWrite(redPin, 183);
      analogWrite(greenPin, 200);
      analogWrite(bluePin, 0);
    } else if (aqi_cat == "Unhealthy") {
      analogWrite(redPin, 183);
      analogWrite(greenPin, 0);
      analogWrite(bluePin, 0);
    } else if (aqi_cat == "Very Unhealthy") {
      analogWrite(redPin, 183);
      analogWrite(greenPin, 0);
      analogWrite(bluePin, 200);
    } else if (aqi_cat == "Hazardous") {
      analogWrite(redPin, 91);
      analogWrite(greenPin, 0);
      analogWrite(bluePin, 0);
    }

    // OLED Display Update
    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(27, 0);
    display.print(F("AQI: "));
    display.println(aqi);
    display.setTextSize(1);
    display.setCursor(0, 20);
    display.print(F("Temp: "));
    display.println(temp);
    display.print(F("Humidity: "));
    display.print(humid);
    display.display();

    lastAQI = aqi;
  }
}
