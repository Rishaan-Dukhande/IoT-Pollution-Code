// Working Air Quality Monitor - Feather M4 + AirLift with Adafruit IO (final version with improvements)
#define USE_AIRLIFT

#include <AdafruitIO_WiFi.h>
#include <Adafruit_BME280.h>
#include <Adafruit_PM25AQI.h>
#include <WiFiNINA.h>
#include <SPI.h>
#include <Wire.h>

#define IO_USERNAME    "" //Adafruit io username
#define IO_KEY         ""//adafruit io key
#define WIFI_SSID      "Stratford Guest" //wifi SSID
#define WIFI_PASS      "SPBSchool@3800" //wifi password

const double AIO_LATITUDE  = 37.31421842651806;      //  +-90.0000   (°)
const double AIO_LONGITUDE = -121.96864537385015;    //  -180.0000   (°)
const double AIO_ELEVATION = 45.0;         //  elevation in meters

#define ESP32_CS_PIN     13
#define ESP32_RESET_PIN  12
#define ESP32_READY_PIN  11
#define SPIWIFI          SPI

AdafruitIO_WiFi io(IO_USERNAME, IO_KEY, WIFI_SSID, WIFI_PASS,
                   ESP32_CS_PIN, ESP32_READY_PIN, ESP32_RESET_PIN, -1, &SPIWIFI);

AdafruitIO_Feed *feed_aqi = nullptr;
AdafruitIO_Feed *feed_aqi_category = nullptr;
AdafruitIO_Feed *feed_temperature = nullptr;
AdafruitIO_Feed *feed_humidity = nullptr;

//Add sensors
Adafruit_BME280 bme; 
Adafruit_PM25AQI pm25;

unsigned long lastPublish = 0;
const unsigned long publishInterval = 2 * 60 * 1000;  // 2 minutes

void setup() {
  Serial.begin(115200);
  delay(1000);

  io.connect(); //constant connection to adafruit io
  unsigned long connectStart = millis();
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
    if (millis() - connectStart > 15000) {
      Serial.println("\nFailed to connect to Adafruit IO.");
      return;
    }
  }
  Serial.println("\nConnected to Adafruit IO");

  feed_aqi = io.feed("air-quality-sensor.aqi"); //sets up aqi connection to adafruit io
  feed_aqi_category = io.feed("air-quality-sensor.category"); //sets up category connection to adafruit io
  feed_temperature = io.feed("air-quality-sensor.temperature"); //sets up temperature connection to adafruit io
  feed_humidity = io.feed("air-quality-sensor.humidity"); //sets up humidity connection to adafruit io

  //Check bme280 connection
  if (!bme.begin(0x76)) {
    Serial.println("BME280 not found at 0x76, trying 0x77..."); //bme.begin(0x76) - works for pervious versions. bme.begin(0x77) - works for other versions
    if (!bme.begin(0x77)) {
      Serial.println("Could not find a valid BME280 sensor at 0x76 or 0x77!");
      while (1);
    }
  }
  Serial.println("BME280 sensor initialized");

  //Checks air quality PM2.5 connection
  Serial1.begin(9600);
  if (!pm25.begin_UART(&Serial1)) {
    Serial.println("Could not find PM2.5 sensor!");
    while(1);
  }
  Serial.println("PM2.5 sensor initialized");

  //Starting values for feeds when IoT pollution monitor is connecting to adafruit io
  if (feed_aqi) feed_aqi->save(0); 
  if (feed_aqi_category) feed_aqi_category->save("Init");
  if (feed_temperature) feed_temperature->save(0);
  if (feed_humidity) feed_humidity->save(0);
}

//calculates aqi and finds corresponding category 
int calculate_aqi(float pm25_val, String &category) {
  int aqi;
  if (pm25_val <= 12.0) {
    aqi = map(pm25_val, 0, 12, 0, 50);
    category = "Good";
  } else if (pm25_val <= 35.4) {
    aqi = map(pm25_val, 12, 35, 51, 100);
    category = "Moderate";
  } else if (pm25_val <= 55.4) {
    aqi = map(pm25_val, 36, 55, 101, 150);
    category = "Unhealthy for Sensitive Groups";
  } else if (pm25_val <= 150.4) {
    aqi = map(pm25_val, 56, 150, 151, 200);
    category = "Unhealthy";
  } else if (pm25_val <= 250.4) {
    aqi = map(pm25_val, 151, 250, 201, 300);
    category = "Very Unhealthy";
  } else {
    aqi = map(pm25_val, 251, 500, 301, 500);
    category = "Hazardous";
  }
  return aqi;
}

void loop() {
  io.run();

  //checks connection to adafruit io
  if (io.status() != AIO_CONNECTED) {
    Serial.println("Reconnecting to Adafruit IO...");
    delay(2000); //Give 2 seconds to settle before reconnection
    io.connect();
    return;
  }

  unsigned long now = millis();
  if (now - lastPublish >= publishInterval) {
    lastPublish = now;
    Serial.println("Reading sensors...");

    PM25_AQI_Data data;
    float pm_avg = 0; //holds sum of pm2.5 values collected
    int samples = 0; //samples keeps track of successful readings

    //takes two sample readings: (i=0, i=1)
    for (int i = 0; i < 2; i++) {
      if (pm25.read(&data)) {
        pm_avg += data.pm25_env; //If data can be read, the reading is added to the air quality average
        samples++;
      } else {
        Serial.println("PM2.5 read error");
      }
      delay(1000);
    }
    //Finds number of samples avaliable
    if (samples == 0) {
      Serial.println("No valid PM2.5 samples");
      return;
    }

    pm_avg /= samples; //finds correct aqi average

    String aqi_cat;
    int aqi = calculate_aqi(pm_avg, aqi_cat);

    float temp = bme.readTemperature() * 1.8 + 32; //Converts temperature to Farenheit
    float humid = bme.readHumidity();

    //Sensor data to serial monitor
    Serial.println("----- Sensor Readings -----");
    Serial.print("AQI: "); Serial.println(aqi);
    Serial.print("Category: "); Serial.println(aqi_cat);
    Serial.print("Temp (F): "); Serial.println(temp);
    Serial.print("Humidity: "); Serial.println(humid);
    Serial.println("---------------------------");

    //Sends location data to map in adafruit io
    if (feed_aqi) {
      feed_aqi->save(aqi, AIO_LATITUDE, AIO_LONGITUDE, AIO_ELEVATION);
      Serial.println("GPS + AQI sent to IO");
    }

    //Sends data to rest of the feeds in Adafruit io
    if (feed_aqi_category) {
      feed_aqi_category->save(aqi_cat);
      Serial.println("Category sent to IO");
    }
    if (feed_temperature) {
      feed_temperature->save(temp);
      Serial.println("Temperature sent to IO");
    }
    if (feed_humidity) {
      feed_humidity->save(humid);
      Serial.println("Humidity sent to IO");
    }
  }
}
